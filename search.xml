<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[four]]></title>
    <url>%2F2018%2F05%2F29%2Ffour%2F</url>
    <content type="text"><![CDATA[]]></content>
  </entry>
  <entry>
    <title><![CDATA[vue的class对象绑定]]></title>
    <url>%2F2018%2F05%2F29%2Fthree%2F</url>
    <content type="text"><![CDATA[本节课程：v-bind:class v-bind:class123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051下面我们对html进行了class的绑定&lt;!DOCTYPE html&gt;&lt;html lang="en"&gt;&lt;head&gt; &lt;meta charset="UTF-8"&gt; &lt;title&gt;vueDemo&lt;/title&gt; &lt;script src="https://cdn.jsdelivr.net/npm/vue"&gt;&lt;/script&gt;&lt;/head&gt;&lt;style&gt; .active &#123; color: red; &#125; .big &#123; font-weight: bolder; font-size: 64px; &#125;&lt;/style&gt;&lt;body&gt; &lt;div id="myApp"&gt; &lt;div v-bind:class="myClass"&gt;文本&lt;/div&gt; &lt;button @click="btnClick"&gt;点击改变&lt;/button&gt; &lt;/div&gt;&lt;/body&gt;&lt;/html&gt;&lt;script &gt; var myApp = new Vue (&#123; el: "#myApp", data: &#123; myClass: &#123; active:true, big:true &#125; &#125;, methods: &#123; btnClick: function() &#123; this.myClass.active = !this.myClass.active; this.myClass.big = !this.myClass.big; &#125; &#125; &#125;)&lt;/script&gt;]]></content>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[VUE知识点]]></title>
    <url>%2F2018%2F05%2F24%2Ftwo%2F</url>
    <content type="text"><![CDATA[1、什么是vue：vue是一个小巧、容易上手的mvvm框架，和angular类似 vue结构为：一片html代码配合json，再new一个vue实例 1234567891011121314151617181920212223242526html: &lt;div id='box'&gt; &#123;&#123;text&#125;&#125; &lt;/div&gt;script: var c = new Vue(&#123; el:'#box', //选择器 id、class、tagName data：&#123; text:'hello vue' &#125; &#125;)前端框架：1. mvc【react】model + view + control2. mvvm【angular、vue】model + view + viewmodelMVVM的优点：低耦合：View可以独立于Model变化和修改，同一个ViewModel可以被多个View复用；并且可以做到View和Model的变化互不影响；可重用性：可以把一些视图的逻辑放在ViewModel，让多个View复用；独立开发：开发人员可以专注与业务逻辑和数据的开发 ViewModemvvm设计人员可以专注于UI(View)的设计；可测试性：清晰的View分层，使得针对表现层业务逻辑的测试更容易，更简单。 2、vue的特点：123不兼容低版本IE、轻（拆分成了很多模块，让用户自己选择需要的功能 vue-router、vuex、vue-resource、vue-server-renderer）、github活跃、作者是中国人所以文档对于中国程序猿更友好、渲染快!) 可以看到angular每秒只能进行100次左右的操作，React大概在1000-2000之间，Vue在10K以上，这是因为Vue每次赋值，都直接触发了数据项的对比然后直接更新绑定DOM元素的内部文本，而不是关联模板（angular）、也没有对比虚拟DOM节点差异（react） 3、常用指令：【扩展html标签功能、属性】 a) v-model (双向数据绑定) 一般表单元素（input）1234567891011121314151617181920b) v-for (循环) [1.*版本]： v-for='item in items' &#123;&#123;item&#125;&#125; v-for='(k,v) in items' &#123;&#123;k&#125;&#125; &#123;&#123;v&#125;&#125; 另外还有：&#123;&#123;$index&#125;&#125; &#123;&#123;$key&#125;&#125;可用 [2.*版本]： v-for='(v,k) in items' &#123;&#123;v&#125;&#125; &#123;&#123;k&#125;&#125; 注意：v、k的顺序改变 去除了&#123;&#123;$index&#125;&#125; &#123;&#123;$key&#125;&#125;c) v-show (显示/隐藏) v-show='布尔值'd) v-if (是否渲染) v-if='布尔' 4、常用事件：(v-on:* / @*) a)鼠标类事件【click/mouseout/mouseover/dbclick/mousedown/contextmenu/..】 1. 用法：v-on:click/@click=&apos;函数&apos; 1234567891011121314 2. 对象：$event原生js： document.getElementById('password').click=function(e)&#123; event = e||window.event &#125;vue.js: @click='mymethod($event)' methods:&#123; mymethod:function(e)&#123; ... &#125; &#125; 3. 阻止冒泡： a) e.cancelBubble = true; b) @click.stop ☆推荐 4. 阻止默认行为： a) e.preventDefault(); b) @contextmenu.prevent ☆推荐 b)键盘类事件【keydown/keyup】1234567891011121314151617181920212223242526272829303132331. 用法：v-on:keydown/@keydown='函数'2. 对象：同鼠标类事件3. 获取键入码： mymothod:function(e)&#123; e.keyCode &#125; 4.常用键： 【exemple】判断按下的键是回车： a) @keydown='mymethod($event)' mymethod:function(e)&#123; if(e.keyCode == 13) console.log('你按下了回车') &#125; b) keydown.13='enterfunc' enterfunc:function()&#123; console.log('你按下了回车') &#125; c) keydown.enter='enterfunc' 【补充】: @keyup/down.left @keyup/down.right @keyup/down.up @keyup/down.down .... 5、常用属性：(v-bind:* / :*)12345678910111213141516171819202122232425262728293031a)class和style: 1. :class='' v-bind:class='' :style='' v-bind:style='' 2. :class='[active, bluebg]' :class='&#123;active:isActive, bluebg:isBlue&#125;' data:&#123; isActive: true, isBlue: false &#125; 3. :class='json' data:&#123; json:&#123;active:isActive, bluebg:false&#125;, isActive:true &#125; 4. :class='[isActive ? active : "", bluebg]' :class='[&#123; active: isActive &#125;, bluebg]' 5. :style="&#123;'margin-left':mleft, fontSize: ftSize + 'rem'&#125;" data:&#123; mleft:'20px', ftSize:'16' &#125;b)其他属性:【width、height、src、disable、自定义属性、...】 v-bind:src='url_data' :src='url_data' &lt;img src='&#123;&#123;url_data&#125;&#125;'&gt; //数据能读出来，但是会报错 &lt;img :src='url_data'&gt; //数据能读出来，且不会报错 6、模板：12345&#123;&#123;text&#125;&#125; //数据更新则模板发生变化 &#123;&#123;*text&#125;&#125; //数据只绑定一次（初始值） &#123;&#123;&#123;text&#125;&#125;&#125; //HTML转义输出 7、过滤器：12345678910111213a) 过滤器用法： &#123;&#123;text| filterA&#125;&#125; &#123;&#123;text| filterA | filterB&#125;&#125; b) 示例： &#123;&#123;text| capitalize&#125;&#125; filters: &#123; capitalize: function (value) &#123; if (!value) return '' value = value.toString() return value.charAt(0).toUpperCase() + value.slice(1) &#125; &#125; 123456789101112131415161718192021222324252627282930313233343536373839404142434445 1.\*版本中vue是自带系统默认的很多过滤器的，虽然不知道为什么，但是作者在2.*版本中全部取消了，让用户自己写filter，下面给出曾经自带的系统默认的过滤器，如果自己写，应该怎么写： 1. uppercase text.toUpperCase() 2. lowercase text.toLowerCase() 3. pluralize filters: &#123; pluralize: function (value, sotval) &#123; if(sotval)&#123; if (value === 0) &#123; return 'no' + sotval; &#125; else if (value === 1) &#123; return '1' + sotval &#125; else &#123; return value + sotval + 's' &#125; &#125;else&#123; return value &#125; &#125; &#125; 4. currency filters: &#123; currency: function (price, money) &#123; if(money)&#123; money + price.toFixed(2) &#125;else&#123; '$' + price.toFixed(2) &#125; &#125; &#125;``` #### 8、交互（vue-resouce） 【引入vue-resouce后，会扩充vue实例对象，vue对象下挂一个$http对象】```bash a)get: //获取一个普通的文本数据 this.$http.get('a.txt').then(function(res)&#123; console.log('success'); this.data = res.data; &#125;,function(res)&#123; console.log('faild'); console.log(res.status); &#125;);]]></content>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2018%2F05%2F22%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
  </entry>
  <entry>
    <title><![CDATA[第一篇文章：hexo教程，快速搭建一个你自己的博客.]]></title>
    <url>%2F2018%2F05%2F16%2Fone%2F</url>
    <content type="text"><![CDATA[准备工作123安装node.js(必须安装)node.js下载 注意：检查是否成功安装 npm 检测方法 npm -v 申请Github账号####GIT网址123点击进入到官网，注册申请账号创建博客仓库注意：仓库名应该为：github用户名.github.io。 下载git，并生成ssh12345678910111213141516171819202122232425262728293031323334353637下载地址https://git-scm.com/，下载完成后鼠标的右键会出现Git Bash Here点击出现一个命令窗口，我们创建的git仓库采用ssh加密的方式。我们首先在本地生成ssh， 打开Git Bash Here命令行设置user.name。user.email git config --global user.name "你的GitHub用户名" git config --global user.email "你的GitHub注册邮箱"在命令行里面输入ssh-keygen -t rsa -C "你的GitHub注册邮箱"接下来按回车正常的一步一步向下走，最终出现Generating public/private rsa key pair.Enter file in which to save the key (/root/.ssh/id_rsa): &lt;==密钥文件默认存放位置，按Enter即可Created directory '/root/.ssh'.Enter passphrase (empty for no passphrase): &lt;== 输入密钥锁码，或直接按 Enter 留空Enter same passphrase again: &lt;== 再输入一遍密钥锁码Your identification has been saved in /root/.ssh/id_rsa. &lt;== 生成的私钥Your public key has been saved in /root/.ssh/id_rsa.pub. &lt;== 生成的公钥The key fingerprint is:SHA256:K1qy928tkk1FUuzQtlZK+poeS67vIgPvHw9lQ+KNuZ4 root@localhost.localdomainThe key's randomart image is:+---[RSA 2048]----+| +. || o * . || . .O + || . *. * || S =+ || . =... || .oo =+o+ || ==o+B*o. || oo.=EXO. |+----[SHA256]-----+到这一步的时候，ssh秘钥已经生成好了。一般路径会在~.ssh/ 这个下面id_rsa.pub这个是公钥需要copy里面的内容,把它放到git网址上（https://github.com/settings/keys）打开网址后New SSH key粘贴你刚刚copy的内容，这样就好了就是这么简单。 接下来我们进行hexo的安装123456789101112131415161718192021222324252627安装hexonpm install hexo-cli gnpm install hexo -g初始化博客文件夹hexo init blog切换到该路径cd blog安装hexo的扩展插件npm install安装其它插件npm install hexo-server --savenpm install hexo-admin --savenpm install hexo-generator-archive --savenpm install hexo-generator-feed --savenpm install hexo-generator-search --savenpm install hexo-generator-tag --savenpm install hexo-deployer-git --savenpm install hexo-generator-sitemap --save安装完之后进入你的blog的_config.yml文件修改：type写成gitrepo为你自己项目的git地址branch写成masterdeploy: type: git repo: git@github.com:xiaoxiangxiao/xiaoxiangxiao.github.io.git branch: master ####最后进行部署你的博客12345678清缓存hexo clean生成静态页hexo g部署上去hexo d运行完之后访问你的地址就行了！]]></content>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
</search>
