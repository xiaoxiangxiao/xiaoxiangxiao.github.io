<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[值得看的书籍]]></title>
    <url>%2F2018%2F06%2F11%2Fsix%2F</url>
    <content type="text"><![CDATA[今天来给大家推荐一下值得看的书籍首先呢，在现在的这个社会里面高强度的工作和浮躁的社会现象，还有互联网娱乐风向的影响有些人已经将书籍抛弃了。大家都说”南抖音北快手”谁还看书呀，但是腹有诗书气自华这个可不是凭空就可以做到的。123456789首先说一下看书的用处，书中的故事是非常有含义的。书中的故事有可能在你看的时候没有太大的感触和理解。但是你会发现在你的生活之中，会有书籍中的故事和你所经历的一样，他可以为你解答你对一些问题的疑惑。书籍呢，有些人说书籍改变你的命运，我们不说这么虚无的，我们就实在的来说。看书是快速了解这个世界，了解不同有价值思想，从书中学到自己所不解的知识而让自己快速的成长。充实自身和了解自己。最后当你把读书变成爱好后你一定会感激现在的自己。 下面介绍一些书籍莫言的书籍12345《蛙》为中国当代作家莫言重要作品，出版于2009年，《蛙》 以新中国近60年波澜起伏的农村生育史为背景，讲述了从事妇产科工作50多年的乡村女医生姑姑的人生经历，也反映出中国计划生育的艰难历程。小说通过讲述从事妇产科工作50多年的乡村女医生姑姑的人生经历，反映新中国近60年波澜起伏的农村生育史，描述国家为了控制人口剧烈增长、实施计划生育国策所走过的艰巨而复杂的历史过程。 12《丰乳肥臀》是莫言最著名的代表作之一 。小说热情讴歌了生命最原初的创造者——母亲的伟大、朴素与无私，生命的沿袭的无与伦比的重要意义。并且在这一幅生命的流程图中，弥漫着历史与战争的硝烟，真实，不带任何偏见，再现了一段时期内的历史。 洪应明（明代）【重点推荐大作】123456这本书首先容纳了儒家、佛家、道家，这三大思想。其文字简炼明隽，兼采雅俗。似语录，而有语录所没有的趣味；似随笔，而有随笔所不易及的整饬；似训诫，而有训诫所缺乏的亲切醒豁；且有雨余山色，夜静钟声，点染其间，其所言清霏有味，风月无边。读过此书的人都深有体会。不同时期年龄的你再次阅读会有不同的理解和感受。 这次就先给大家介绍这三本，未完待续！！！]]></content>
      <categories>
        <category>book</category>
      </categories>
      <tags>
        <tag>book</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Markdown语法介绍]]></title>
    <url>%2F2018%2F06%2F01%2Ffive%2F</url>
    <content type="text"><![CDATA[标题123456789101112131415161718192021222324252627282930313233标题都以#开头，标题会自动换行语法: # 这是标题1## 这是标题2### 这是标题3#### 这是标题4这是普通文字这是标题1这是标题2这是标题3这是标题4这是普通文字 换行每行文字后面加2个或更多空格文字行1（后面加2个空格）文字行2（后面加2个空格）文字行3（后面无空格，仅用换行）文字行4（后面无空格，仅用换行）文字行5（后面无空格，仅用换行） 代码高亮12345678910行内代码高亮可以用两个``将内容包裹起来。例如`function()&#123;return 0&#125;` 表现为function()&#123;return 0&#125;。可以保持高亮。如果是多行内容，则使用```将代码包起来。Example:```javascriptvar s = "JavaScript syntax highlighting";alert(s); 1234def function(): #indenting works just fine in the fenced code block s = "Python syntax highlighting" print s 123require 'redcarpet'markdown = Redcarpet.new("Hello World!")puts markdown.to_html 123No language indicated, so no syntax highlighting.s = &quot;There is no highlighting for this.&quot;But let&apos;s throw in a &lt;b&gt;tag&lt;/b&gt;. becomes: var s = &quot;JavaScript syntax highlighting&quot;; alert(s); def function(): #indenting works just fine in the fenced code block s = &quot;Python syntax highlighting&quot; print s require &apos;redcarpet&apos; markdown = Redcarpet.new(&quot;Hello World!&quot;) puts markdown.to_html No language indicated, so no syntax highlighting. s = &quot;There is no highlighting for this.&quot; But let&apos;s throw in a &lt;b&gt;tag&lt;/b&gt;. 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132```bash链接语法: [链接名称](链接地址)列表无序列表Markdown 语法：* 项目一 * 项目二 * 项目二的子项目一 * 项目二的子项目二效果如下：项目一项目二项目二的子项目一 项目二的子项目二有序列表Markdown 语法：1. 项目一 2. 项目二 3. 项目三 1. 项目三的子项目一 2. 项目三的子项目二效果如下：项目一 项目二 项目三项目三的子项目一项目三的子项目二任务列表（Task lists）Markdown 语法：- [ ] 任务一 未做任务- [x] 任务二 已做任务效果如下： 任务一 未做任务 任务二 已做任务表格Example:| header 1 | header 2 || -------- | -------- || cell 1 | cell 2 || cell 3 | cell 4 |效果：header 1header 2cell 1cell 2cell 3cell 4引用&gt; 这是引用&gt; 直接换行 &gt; 行后面跟两个空格 &gt; 行后面跟两个空格效果这是引用直接换行行后面跟两个空格行后面跟两个空格删除Examples:&#123;+ additions +&#125;[+ additions +]&#123;- deletions -&#125;[- deletions -]~~test~~ additions additions deletions deletions test]]></content>
      <categories>
        <category>Markdown</category>
      </categories>
      <tags>
        <tag>Markdown</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[hexo文章中发表图片方法]]></title>
    <url>%2F2018%2F05%2F29%2Ffour%2F</url>
    <content type="text"><![CDATA[开启本地配置123在我们的本地的hexo的_config.yml文件中，找到post_asset_folder这个参数。修改为post_asset_folder = true. 怎么生成图片123456789我们开启hexo的这个配置后，在我们下次进行new一个博客的时候会直接产生一个和博客文件名一样的文件夹。在这个文件夹中，我们可以直接把我们需要用到的图片放进去。图片放入之后，我们在我们的md文件里面使用markdown的语法引入图片。例：![logo](博客相同的文件夹名字/logo.jpg)如果没有出现图片请用下面的路径：![logo](/2018/05/29/博客相同的文件夹名字/logo.jpg)我们在前面加上当天的日期。之后进行上传博客到你自己的git上面。 展示]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[vue的class对象绑定]]></title>
    <url>%2F2018%2F05%2F29%2Fthree%2F</url>
    <content type="text"><![CDATA[本节课程：v-bind:class v-bind:class123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051下面我们对html进行了class的绑定&lt;!DOCTYPE html&gt;&lt;html lang="en"&gt;&lt;head&gt; &lt;meta charset="UTF-8"&gt; &lt;title&gt;vueDemo&lt;/title&gt; &lt;script src="https://cdn.jsdelivr.net/npm/vue"&gt;&lt;/script&gt;&lt;/head&gt;&lt;style&gt; .active &#123; color: red; &#125; .big &#123; font-weight: bolder; font-size: 64px; &#125;&lt;/style&gt;&lt;body&gt; &lt;div id="myApp"&gt; &lt;div v-bind:class="myClass"&gt;文本&lt;/div&gt; &lt;button @click="btnClick"&gt;点击改变&lt;/button&gt; &lt;/div&gt;&lt;/body&gt;&lt;/html&gt;&lt;script &gt; var myApp = new Vue (&#123; el: "#myApp", data: &#123; myClass: &#123; active:true, big:true &#125; &#125;, methods: &#123; btnClick: function() &#123; this.myClass.active = !this.myClass.active; this.myClass.big = !this.myClass.big; &#125; &#125; &#125;)&lt;/script&gt;]]></content>
      <categories>
        <category>vue</category>
      </categories>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[VUE知识点]]></title>
    <url>%2F2018%2F05%2F24%2Ftwo%2F</url>
    <content type="text"><![CDATA[1、什么是vue：vue是一个小巧、容易上手的mvvm框架，和angular类似 vue结构为：一片html代码配合json，再new一个vue实例 1234567891011121314151617181920212223242526html: &lt;div id='box'&gt; &#123;&#123;text&#125;&#125; &lt;/div&gt;script: var c = new Vue(&#123; el:'#box', //选择器 id、class、tagName data：&#123; text:'hello vue' &#125; &#125;)前端框架：1. mvc【react】model + view + control2. mvvm【angular、vue】model + view + viewmodelMVVM的优点：低耦合：View可以独立于Model变化和修改，同一个ViewModel可以被多个View复用；并且可以做到View和Model的变化互不影响；可重用性：可以把一些视图的逻辑放在ViewModel，让多个View复用；独立开发：开发人员可以专注与业务逻辑和数据的开发 ViewModemvvm设计人员可以专注于UI(View)的设计；可测试性：清晰的View分层，使得针对表现层业务逻辑的测试更容易，更简单。 2、vue的特点：123不兼容低版本IE、轻（拆分成了很多模块，让用户自己选择需要的功能 vue-router、vuex、vue-resource、vue-server-renderer）、github活跃、作者是中国人所以文档对于中国程序猿更友好、渲染快!) 可以看到angular每秒只能进行100次左右的操作，React大概在1000-2000之间，Vue在10K以上，这是因为Vue每次赋值，都直接触发了数据项的对比然后直接更新绑定DOM元素的内部文本，而不是关联模板（angular）、也没有对比虚拟DOM节点差异（react） 3、常用指令：【扩展html标签功能、属性】 a) v-model (双向数据绑定) 一般表单元素（input）1234567891011121314151617181920b) v-for (循环) [1.*版本]： v-for='item in items' &#123;&#123;item&#125;&#125; v-for='(k,v) in items' &#123;&#123;k&#125;&#125; &#123;&#123;v&#125;&#125; 另外还有：&#123;&#123;$index&#125;&#125; &#123;&#123;$key&#125;&#125;可用 [2.*版本]： v-for='(v,k) in items' &#123;&#123;v&#125;&#125; &#123;&#123;k&#125;&#125; 注意：v、k的顺序改变 去除了&#123;&#123;$index&#125;&#125; &#123;&#123;$key&#125;&#125;c) v-show (显示/隐藏) v-show='布尔值'd) v-if (是否渲染) v-if='布尔' 4、常用事件：(v-on:* / @*) a)鼠标类事件【click/mouseout/mouseover/dbclick/mousedown/contextmenu/..】 1. 用法：v-on:click/@click=&apos;函数&apos; 1234567891011121314 2. 对象：$event原生js： document.getElementById('password').click=function(e)&#123; event = e||window.event &#125;vue.js: @click='mymethod($event)' methods:&#123; mymethod:function(e)&#123; ... &#125; &#125; 3. 阻止冒泡： a) e.cancelBubble = true; b) @click.stop ☆推荐 4. 阻止默认行为： a) e.preventDefault(); b) @contextmenu.prevent ☆推荐 b)键盘类事件【keydown/keyup】1234567891011121314151617181920212223242526272829303132331. 用法：v-on:keydown/@keydown='函数'2. 对象：同鼠标类事件3. 获取键入码： mymothod:function(e)&#123; e.keyCode &#125; 4.常用键： 【exemple】判断按下的键是回车： a) @keydown='mymethod($event)' mymethod:function(e)&#123; if(e.keyCode == 13) console.log('你按下了回车') &#125; b) keydown.13='enterfunc' enterfunc:function()&#123; console.log('你按下了回车') &#125; c) keydown.enter='enterfunc' 【补充】: @keyup/down.left @keyup/down.right @keyup/down.up @keyup/down.down .... 5、常用属性：(v-bind:* / :*)12345678910111213141516171819202122232425262728293031a)class和style: 1. :class='' v-bind:class='' :style='' v-bind:style='' 2. :class='[active, bluebg]' :class='&#123;active:isActive, bluebg:isBlue&#125;' data:&#123; isActive: true, isBlue: false &#125; 3. :class='json' data:&#123; json:&#123;active:isActive, bluebg:false&#125;, isActive:true &#125; 4. :class='[isActive ? active : "", bluebg]' :class='[&#123; active: isActive &#125;, bluebg]' 5. :style="&#123;'margin-left':mleft, fontSize: ftSize + 'rem'&#125;" data:&#123; mleft:'20px', ftSize:'16' &#125;b)其他属性:【width、height、src、disable、自定义属性、...】 v-bind:src='url_data' :src='url_data' &lt;img src='&#123;&#123;url_data&#125;&#125;'&gt; //数据能读出来，但是会报错 &lt;img :src='url_data'&gt; //数据能读出来，且不会报错 6、模板：12345&#123;&#123;text&#125;&#125; //数据更新则模板发生变化 &#123;&#123;*text&#125;&#125; //数据只绑定一次（初始值） &#123;&#123;&#123;text&#125;&#125;&#125; //HTML转义输出 7、过滤器：12345678910111213a) 过滤器用法： &#123;&#123;text| filterA&#125;&#125; &#123;&#123;text| filterA | filterB&#125;&#125; b) 示例： &#123;&#123;text| capitalize&#125;&#125; filters: &#123; capitalize: function (value) &#123; if (!value) return '' value = value.toString() return value.charAt(0).toUpperCase() + value.slice(1) &#125; &#125; 123456789101112131415161718192021222324252627282930313233343536373839404142434445 1.\*版本中vue是自带系统默认的很多过滤器的，虽然不知道为什么，但是作者在2.*版本中全部取消了，让用户自己写filter，下面给出曾经自带的系统默认的过滤器，如果自己写，应该怎么写： 1. uppercase text.toUpperCase() 2. lowercase text.toLowerCase() 3. pluralize filters: &#123; pluralize: function (value, sotval) &#123; if(sotval)&#123; if (value === 0) &#123; return 'no' + sotval; &#125; else if (value === 1) &#123; return '1' + sotval &#125; else &#123; return value + sotval + 's' &#125; &#125;else&#123; return value &#125; &#125; &#125; 4. currency filters: &#123; currency: function (price, money) &#123; if(money)&#123; money + price.toFixed(2) &#125;else&#123; '$' + price.toFixed(2) &#125; &#125; &#125;``` #### 8、交互（vue-resouce） 【引入vue-resouce后，会扩充vue实例对象，vue对象下挂一个$http对象】```bash a)get: //获取一个普通的文本数据 this.$http.get('a.txt').then(function(res)&#123; console.log('success'); this.data = res.data; &#125;,function(res)&#123; console.log('faild'); console.log(res.status); &#125;);]]></content>
      <categories>
        <category>vue</category>
      </categories>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2018%2F05%2F22%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
  </entry>
  <entry>
    <title><![CDATA[第一篇文章：hexo教程，快速搭建一个你自己的博客.]]></title>
    <url>%2F2018%2F05%2F16%2Fone%2F</url>
    <content type="text"><![CDATA[准备工作123安装node.js(必须安装)node.js下载 注意：检查是否成功安装 npm 检测方法 npm -v 申请Github账号####GIT网址123点击进入到官网，注册申请账号创建博客仓库注意：仓库名应该为：github用户名.github.io。 下载git，并生成ssh12345678910111213141516171819202122232425262728293031323334353637下载地址https://git-scm.com/，下载完成后鼠标的右键会出现Git Bash Here点击出现一个命令窗口，我们创建的git仓库采用ssh加密的方式。我们首先在本地生成ssh， 打开Git Bash Here命令行设置user.name。user.email git config --global user.name "你的GitHub用户名" git config --global user.email "你的GitHub注册邮箱"在命令行里面输入ssh-keygen -t rsa -C "你的GitHub注册邮箱"接下来按回车正常的一步一步向下走，最终出现Generating public/private rsa key pair.Enter file in which to save the key (/root/.ssh/id_rsa): &lt;==密钥文件默认存放位置，按Enter即可Created directory '/root/.ssh'.Enter passphrase (empty for no passphrase): &lt;== 输入密钥锁码，或直接按 Enter 留空Enter same passphrase again: &lt;== 再输入一遍密钥锁码Your identification has been saved in /root/.ssh/id_rsa. &lt;== 生成的私钥Your public key has been saved in /root/.ssh/id_rsa.pub. &lt;== 生成的公钥The key fingerprint is:SHA256:K1qy928tkk1FUuzQtlZK+poeS67vIgPvHw9lQ+KNuZ4 root@localhost.localdomainThe key's randomart image is:+---[RSA 2048]----+| +. || o * . || . .O + || . *. * || S =+ || . =... || .oo =+o+ || ==o+B*o. || oo.=EXO. |+----[SHA256]-----+到这一步的时候，ssh秘钥已经生成好了。一般路径会在~.ssh/ 这个下面id_rsa.pub这个是公钥需要copy里面的内容,把它放到git网址上（https://github.com/settings/keys）打开网址后New SSH key粘贴你刚刚copy的内容，这样就好了就是这么简单。 接下来我们进行hexo的安装123456789101112131415161718192021222324252627安装hexonpm install hexo-cli gnpm install hexo -g初始化博客文件夹hexo init blog切换到该路径cd blog安装hexo的扩展插件npm install安装其它插件npm install hexo-server --savenpm install hexo-admin --savenpm install hexo-generator-archive --savenpm install hexo-generator-feed --savenpm install hexo-generator-search --savenpm install hexo-generator-tag --savenpm install hexo-deployer-git --savenpm install hexo-generator-sitemap --save安装完之后进入你的blog的_config.yml文件修改：type写成gitrepo为你自己项目的git地址branch写成masterdeploy: type: git repo: git@github.com:xiaoxiangxiao/xiaoxiangxiao.github.io.git branch: master ####最后进行部署你的博客12345678清缓存hexo clean生成静态页hexo g部署上去hexo d运行完之后访问你的地址就行了！]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
</search>
